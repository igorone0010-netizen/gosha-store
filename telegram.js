// PlayStation Store - Main Application Logic

class PSStoreApp {
    constructor() {
        this.currentSection = 'main-menu';
        this.navigationHistory = [];
        this.products = {};
        this.categories = [];
        this.init();
    }

    async init() {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram API
        await this.waitForTelegram();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.initializeComponents();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await this.loadData();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupUI();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        console.log('PlayStation Store –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    async waitForTelegram() {
        return new Promise((resolve) => {
            if (window.telegramAPI) {
                resolve();
            } else {
                const checkTelegram = setInterval(() => {
                    if (window.telegramAPI) {
                        clearInterval(checkTelegram);
                        resolve();
                    }
                }, 100);
            }
        });
    }

    initializeComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        if (window.Cart) {
            this.cart = new Cart();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if (window.ProductManager) {
            this.productManager = new ProductManager();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if (window.SupportManager) {
            this.supportManager = new SupportManager();
        }
    }

    async loadData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            const response = await fetch('/products_data.json');
            if (response.ok) {
                this.products = await response.json();
            } else {
                // Fallback –¥–∞–Ω–Ω—ã–µ
                this.products = this.getFallbackProducts();
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.extractCategories();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.products = this.getFallbackProducts();
            this.extractCategories();
        }
    }

    getFallbackProducts() {
        return {
            "playstation_personal": [
                {
                    "id": 1,
                    "name": "God of War Ragnar√∂k",
                    "price": 3999,
                    "oldPrice": 4999,
                    "image": "https://image.api.playstation.com/vulcan/ap/rnd/202207/1210/4xJ8XB3bi888QTLZYdl7Oi0s.png",
                    "category": "–≠–∫—à–Ω",
                    "description": "–ö—Ä–∞—Ç–æ—Å –∏ –ê—Ç—Ä–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –¥–µ–≤—è—Ç–∏ –º–∏—Ä–∞–º –≤ –ø–æ–∏—Å–∫–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤."
                },
                {
                    "id": 2,
                    "name": "Marvel's Spider-Man 2",
                    "price": 4999,
                    "oldPrice": 5999,
                    "image": "https://image.api.playstation.com/vulcan/ap/rnd/202306/1219/1c7b75d8ed9271516546560d219ad0b22ee0a263b4537bd8.png",
                    "category": "–≠–∫—à–Ω",
                    "description": "–ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏ –ú–∞–π–ª—Å –ú–æ—Ä–∞–ª–µ—Å –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –Ω–æ–≤–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏."
                }
            ],
            "ps_plus": [
                {
                    "id": 101,
                    "name": "PS Plus Essential - 1 –º–µ—Å—è—Ü",
                    "price": 599,
                    "oldPrice": 0,
                    "image": "https://via.placeholder.com/300x200/ffcc00/000000?text=PS+Plus",
                    "category": "–ü–æ–¥–ø–∏—Å–∫–∞",
                    "description": "–î–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞–º –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –∏–≥—Ä–∞–º."
                },
                {
                    "id": 102,
                    "name": "PS Plus Extra - 1 –º–µ—Å—è—Ü",
                    "price": 999,
                    "oldPrice": 0,
                    "image": "https://via.placeholder.com/300x200/ffcc00/000000?text=PS+Plus+Extra",
                    "category": "–ü–æ–¥–ø–∏—Å–∫–∞",
                    "description": "–ö–∞—Ç–∞–ª–æ–≥ –∏–∑ —Å–æ—Ç–µ–Ω –∏–≥—Ä PS4 –∏ PS5."
                }
            ],
            "wallet_refill": [
                {
                    "id": 201,
                    "name": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ 1000 ‚ÇΩ",
                    "price": 1000,
                    "oldPrice": 0,
                    "image": "https://via.placeholder.com/300x200/8b5cf6/ffffff?text=1000+RUB",
                    "category": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "description": "–ö–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ PlayStation Store –Ω–∞ 1000 —Ä—É–±–ª–µ–π."
                },
                {
                    "id": 202,
                    "name": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ 2000 ‚ÇΩ",
                    "price": 2000,
                    "oldPrice": 0,
                    "image": "https://via.placeholder.com/300x200/8b5cf6/ffffff?text=2000+RUB",
                    "category": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "description": "–ö–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ PlayStation Store –Ω–∞ 2000 —Ä—É–±–ª–µ–π."
                }
            ]
        };
    }

    extractCategories() {
        this.categories = [
            { id: 'playstation_personal', name: 'PlayStation –õ–∏—á–Ω—ã–π', icon: 'üéÆ' },
            { id: 'ps_plus', name: 'PS Plus', icon: '‚≠ê' },
            { id: 'wallet_refill', name: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞', icon: 'üí≥' }
        ];
    }

    setupUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userNameElement = document.getElementById('user-name');
        if (userNameElement && window.telegramAPI) {
            userNameElement.textContent = window.telegramAPI.getUserName();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.showMainMenu();
    }

    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram —Å–æ–±—ã—Ç–∏–π
        document.addEventListener('showMainMenu', () => {
            this.showMainMenu();
        });

        document.addEventListener('mainButtonClicked', () => {
            this.handleMainButtonClick();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.setupNavigationHandlers();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
        this.setupSearchHandlers();
    }

    setupNavigationHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                window.telegramAPI?.selectionFeedback();
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                navItems.forEach(nav => nav.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                item.classList.add('active');
            });
        });
    }

    setupSearchHandlers() {
        // –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ PlayStation Personal
        const searchPersonal = document.getElementById('search-personal');
        if (searchPersonal) {
            searchPersonal.addEventListener('input', (e) => {
                this.searchProducts('playstation-personal', e.target.value);
            });
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    showSection(sectionId) {
        window.telegramAPI?.impactFeedback('light');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.main-content, .content-section').forEach(section => {
            section.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
            this.currentSection = sectionId;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            this.navigationHistory.push(sectionId);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (sectionId !== 'main-menu') {
                window.telegramAPI?.showBackButton();
            } else {
                window.telegramAPI?.hideBackButton();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏
            this.loadSectionProducts(sectionId);
        }
    }

    showMainMenu() {
        this.showSection('main-menu');
        this.navigationHistory = ['main-menu'];
        window.telegramAPI?.hideBackButton();
        window.telegramAPI?.hideMainButton();
    }

    goBack() {
        if (this.navigationHistory.length > 1) {
            this.navigationHistory.pop(); // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const previousSection = this.navigationHistory[this.navigationHistory.length - 1];
            this.showSection(previousSection);
        } else {
            this.showMainMenu();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–∏
    loadSectionProducts(sectionId) {
        let productsKey = '';
        let containerId = '';
        
        switch (sectionId) {
            case 'playstation-personal':
                productsKey = 'playstation_personal';
                containerId = 'products-personal';
                break;
            case 'ps-plus':
                productsKey = 'ps_plus';
                containerId = 'products-plus';
                break;
            case 'wallet-refill':
                productsKey = 'wallet_refill';
                containerId = 'products-wallet';
                break;
            default:
                return;
        }
        
        const products = this.products[productsKey] || [];
        const container = document.getElementById(containerId);
        
        if (container) {
            this.renderProducts(products, container);
        }
    }

    renderProducts(products, container) {
        if (!products || products.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üéÆ</div>
                    <p>–¢–æ–≤–∞—Ä—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è</p>
                </div>
            `;
            return;
        }

        container.innerHTML = products.map(product => `
            <div class="product-card" onclick="app.showProductModal(${product.id}, '${this.getProductsKeyByContainer(container.id)}')">
                <img src="${product.image}" alt="${product.name}" class="product-image" 
                     onerror="this.src='https://via.placeholder.com/300x200/2d2d2d/ffffff?text=No+Image'">
                <div class="product-info">
                    <div class="product-category">${product.category}</div>
                    <div class="product-name">${product.name}</div>
                    <div class="product-price">
                        <span class="current-price">${this.formatPrice(product.price)}</span>
                        ${product.oldPrice > 0 ? `
                            <span class="old-price">${this.formatPrice(product.oldPrice)}</span>
                            <span class="discount">-${Math.round((1 - product.price / product.oldPrice) * 100)}%</span>
                        ` : ''}
                    </div>
                    <button class="add-to-cart-btn" onclick="event.stopPropagation(); app.addToCart(${product.id}, '${this.getProductsKeyByContainer(container.id)}')">
                        –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                </div>
            </div>
        `).join('');
    }

    getProductsKeyByContainer(containerId) {
        const mapping = {
            'products-personal': 'playstation_personal',
            'products-plus': 'ps_plus',
            'products-wallet': 'wallet_refill'
        };
        return mapping[containerId] || 'playstation_personal';
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    searchProducts(sectionId, query) {
        const productsKey = this.getProductsKeyByContainer(sectionId.replace('-', '-') + 's');
        const products = this.products[productsKey] || [];
        
        if (!query.trim()) {
            const container = document.getElementById(sectionId.replace('-', '-') + 's');
            this.renderProducts(products, container);
            return;
        }
        
        const filteredProducts = products.filter(product => 
            product.name.toLowerCase().includes(query.toLowerCase()) ||
            product.category.toLowerCase().includes(query.toLowerCase()) ||
            product.description.toLowerCase().includes(query.toLowerCase())
        );
        
        const container = document.getElementById(sectionId.replace('-', '-') + 's');
        this.renderProducts(filteredProducts, container);
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    showProductModal(productId, productsKey) {
        const products = this.products[productsKey] || [];
        const product = products.find(p => p.id === productId);
        
        if (!product) return;
        
        window.telegramAPI?.impactFeedback('medium');
        
        const modal = document.getElementById('product-modal');
        const modalContent = document.getElementById('modal-product-info');
        
        modalContent.innerHTML = `
            <img src="${product.image}" alt="${product.name}" style="width: 100%; max-width: 400px; border-radius: 12px; margin-bottom: 16px;"
                 onerror="this.src='https://via.placeholder.com/400x300/2d2d2d/ffffff?text=No+Image'">
            <h2 style="margin-bottom: 8px;">${product.name}</h2>
            <div style="color: var(--ps-light-blue); margin-bottom: 16px; text-transform: uppercase; font-size: 14px; letter-spacing: 0.5px;">
                ${product.category}
            </div>
            <p style="margin-bottom: 20px; line-height: 1.6; opacity: 0.9;">
                ${product.description}
            </p>
            <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 24px;">
                <span style="font-size: 24px; font-weight: bold; color: var(--ps-green);">
                    ${this.formatPrice(product.price)}
                </span>
                ${product.oldPrice > 0 ? `
                    <span style="font-size: 18px; color: rgba(255,255,255,0.5); text-decoration: line-through;">
                        ${this.formatPrice(product.oldPrice)}
                    </span>
                    <span style="background: var(--ps-red); color: white; padding: 4px 8px; border-radius: 6px; font-size: 12px; font-weight: bold;">
                        -${Math.round((1 - product.price / product.oldPrice) * 100)}%
                    </span>
                ` : ''}
            </div>
            <button onclick="app.addToCart(${product.id}, '${productsKey}'); app.closeModal();" 
                    style="width: 100%; background: var(--ps-blue); border: none; color: white; padding: 16px; border-radius: 12px; font-size: 16px; font-weight: bold; cursor: pointer; transition: all 0.3s ease;">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
        `;
        
        modal.classList.add('active');
    }

    closeModal() {
        const modal = document.getElementById('product-modal');
        modal.classList.remove('active');
    }

    // –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    addToCart(productId, productsKey) {
        const products = this.products[productsKey] || [];
        const product = products.find(p => p.id === productId);
        
        if (!product) return;
        
        if (this.cart) {
            this.cart.addItem(product);
            window.telegramAPI?.notificationFeedback('success');
            this.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', 'success');
        }
    }

    showCart() {
        this.showSection('cart');
        if (this.cart) {
            this.cart.render();
        }
    }

    showOrderHistory() {
        this.showSection('order-history');
        this.loadOrderHistory();
    }

    showSupport() {
        this.showSection('support');
    }

    // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
    loadOrderHistory() {
        const container = document.getElementById('history-items');
        const orders = this.getOrderHistory();
        
        if (orders.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìã</div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = orders.map(order => `
            <div class="history-item">
                <div class="history-header">
                    <span class="order-id">–ó–∞–∫–∞–∑ #${order.id}</span>
                    <span class="order-date">${this.formatDate(order.timestamp)}</span>
                </div>
                <div class="order-status status-${order.status}">
                    ${this.getStatusText(order.status)}
                </div>
                <div class="order-items">
                    ${order.items.map(item => `
                        <div class="order-item">
                            <span>${item.name} x${item.quantity}</span>
                            <span>${this.formatPrice(item.price * item.quantity)}</span>
                        </div>
                    `).join('')}
                </div>
                <div class="order-total">
                    –ò—Ç–æ–≥–æ: ${this.formatPrice(order.total)}
                </div>
            </div>
        `).join('');
    }

    getOrderHistory() {
        const orders = localStorage.getItem('ps_store_orders');
        return orders ? JSON.parse(orders) : [];
    }

    saveOrder(order) {
        const orders = this.getOrderHistory();
        orders.unshift(order);
        localStorage.setItem('ps_store_orders', JSON.stringify(orders));
    }

    getStatusText(status) {
        const statusMap = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusMap[status] || status;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'success') {
        const notification = document.getElementById('notification');
        const notificationText = document.getElementById('notification-text');
        
        notificationText.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
    handleMainButtonClick() {
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (this.currentSection === 'cart') {
            this.checkout();
        }
    }

    checkout() {
        if (!this.cart || this.cart.items.length === 0) {
            this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'warning');
            return;
        }
        
        const orderData = {
            items: this.cart.items,
            total: this.cart.getTotal()
        };
        
        const order = window.telegramAPI.createOrder(orderData);
        this.saveOrder(order);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        this.cart.clear();
        
        this.showNotification('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', 'success');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        setTimeout(() => {
            this.showMainMenu();
        }, 2000);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    formatPrice(price) {
        return window.telegramAPI?.formatPrice(price) || `${price} ‚ÇΩ`;
    }

    formatDate(date) {
        return window.telegramAPI?.formatDate(date) || new Date(date).toLocaleDateString('ru-RU');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.showSection = (sectionId) => {
    if (window.app) {
        window.app.showSection(sectionId);
    }
};

window.showMainMenu = () => {
    if (window.app) {
        window.app.showMainMenu();
    }
};

window.goBack = () => {
    if (window.app) {
        window.app.goBack();
    }
};

window.showCart = () => {
    if (window.app) {
        window.app.showCart();
    }
};

window.showOrderHistory = () => {
    if (window.app) {
        window.app.showOrderHistory();
    }
};

window.showSupport = () => {
    if (window.app) {
        window.app.showSupport();
    }
};

window.closeModal = () => {
    if (window.app) {
        window.app.closeModal();
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new PSStoreApp();
});