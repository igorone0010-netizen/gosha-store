// PlayStation Store - Support System

class SupportManager {
    constructor() {
        this.tickets = [];
        this.storageKey = 'ps_store_support_tickets';
        this.init();
    }

    init() {
        this.loadTickets();
        this.setupEventHandlers();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ localStorage
    loadTickets() {
        try {
            const savedTickets = localStorage.getItem(this.storageKey);
            if (savedTickets) {
                this.tickets = JSON.parse(savedTickets);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', error);
            this.tickets = [];
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –≤ localStorage
    saveTickets() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.tickets));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const supportForm = document.getElementById('support-form');
        if (supportForm) {
            supportForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleSupportFormSubmit(e);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É Telegram
        const telegramContact = document.querySelector('.contact-value');
        if (telegramContact && telegramContact.textContent.includes('@')) {
            telegramContact.addEventListener('click', () => {
                this.openTelegramBot();
            });
            telegramContact.style.cursor = 'pointer';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    handleSupportFormSubmit(event) {
        const formData = new FormData(event.target);
        const subject = document.getElementById('ticket-subject').value;
        const message = document.getElementById('ticket-message').value;

        if (!subject || !message.trim()) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
        const ticket = this.createTicket({
            subject: subject,
            message: message.trim()
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç
        this.submitTicket(ticket);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        event.target.reset();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');

        // Haptic feedback
        if (window.telegramAPI) {
            window.telegramAPI.notificationFeedback('success');
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    createTicket(ticketData) {
        const ticket = {
            id: this.generateTicketId(),
            userId: window.telegramAPI?.getUserId() || 'anonymous',
            userName: window.telegramAPI?.getUserName() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            subject: ticketData.subject,
            message: ticketData.message,
            status: 'open',
            priority: this.calculatePriority(ticketData.subject),
            timestamp: new Date().toISOString(),
            responses: []
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
        this.tickets.unshift(ticket);
        this.saveTickets();

        return ticket;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–∏–∫–µ—Ç–∞
    generateTicketId() {
        const timestamp = Date.now();
        const random = Math.floor(Math.random() * 1000);
        return `TKT-${timestamp}-${random}`;
    }

    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–∫–µ—Ç–∞
    calculatePriority(subject) {
        const highPriorityKeywords = ['–æ–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞'];
        const mediumPriorityKeywords = ['–∑–∞–∫–∞–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫–æ–¥'];
        
        const lowerSubject = subject.toLowerCase();
        
        if (highPriorityKeywords.some(keyword => lowerSubject.includes(keyword))) {
            return 'high';
        } else if (mediumPriorityKeywords.some(keyword => lowerSubject.includes(keyword))) {
            return 'medium';
        } else {
            return 'low';
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞
    async submitTicket(ticket) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp API
            if (window.telegramAPI) {
                window.telegramAPI.createSupportTicket({
                    subject: ticket.subject,
                    message: ticket.message
                });
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            await this.sendTicketToWebhook(ticket);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
            ticket.status = 'submitted';
            this.saveTickets();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞:', error);
            ticket.status = 'failed';
            this.saveTickets();
            this.showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    async sendTicketToWebhook(ticket) {
        try {
            const response = await fetch('/webhook/support', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'support_ticket',
                    ticket: ticket,
                    user: window.telegramAPI?.getUser()
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            console.log('–¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webhook');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ webhook:', error);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram API
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞ Telegram
    openTelegramBot() {
        const botUsername = 'GoshaStoreBot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –±–æ—Ç
        
        if (window.telegramAPI && window.telegramAPI.tg) {
            // –ï—Å–ª–∏ –≤ Telegram, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            window.telegramAPI.tg.openTelegramLink(`https://t.me/${botUsername}`);
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            window.open(`https://t.me/${botUsername}`, '_blank');
        }

        if (window.telegramAPI) {
            window.telegramAPI.impactFeedback('medium');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserTickets() {
        const userId = window.telegramAPI?.getUserId();
        if (!userId) return [];

        return this.tickets.filter(ticket => ticket.userId === userId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ ID
    getTicketById(ticketId) {
        return this.tickets.find(ticket => ticket.id === ticketId);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
    updateTicketStatus(ticketId, status) {
        const ticket = this.getTicketById(ticketId);
        if (ticket) {
            ticket.status = status;
            ticket.updatedAt = new Date().toISOString();
            this.saveTickets();
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫ —Ç–∏–∫–µ—Ç—É
    addTicketResponse(ticketId, response) {
        const ticket = this.getTicketById(ticketId);
        if (ticket) {
            ticket.responses.push({
                id: Date.now(),
                message: response.message,
                author: response.author || 'Support',
                timestamp: new Date().toISOString()
            });
            ticket.updatedAt = new Date().toISOString();
            this.saveTickets();
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
    renderTicketHistory() {
        const userTickets = this.getUserTickets();
        const container = document.getElementById('ticket-history');
        
        if (!container) return;

        if (userTickets.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üé´</div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                </div>
            `;
            return;
        }

        container.innerHTML = userTickets.map(ticket => `
            <div class="ticket-item" onclick="supportManager.showTicketDetails('${ticket.id}')">
                <div class="ticket-header">
                    <span class="ticket-id">${ticket.id}</span>
                    <span class="ticket-date">${this.formatDate(ticket.timestamp)}</span>
                </div>
                <div class="ticket-subject">${ticket.subject}</div>
                <div class="ticket-status status-${ticket.status}">
                    ${this.getStatusText(ticket.status)}
                </div>
                <div class="ticket-priority priority-${ticket.priority}">
                    ${this.getPriorityText(ticket.priority)}
                </div>
            </div>
        `).join('');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞
    showTicketDetails(ticketId) {
        const ticket = this.getTicketById(ticketId);
        if (!ticket) return;

        const modal = document.getElementById('ticket-modal') || this.createTicketModal();
        const content = modal.querySelector('.modal-content');

        content.innerHTML = `
            <span class="close" onclick="supportManager.closeTicketModal()">&times;</span>
            <h2>–¢–∏–∫–µ—Ç ${ticket.id}</h2>
            <div class="ticket-details">
                <div class="ticket-meta">
                    <div class="meta-item">
                        <strong>–¢–µ–º–∞:</strong> ${ticket.subject}
                    </div>
                    <div class="meta-item">
                        <strong>–°—Ç–∞—Ç—É—Å:</strong> 
                        <span class="status-badge status-${ticket.status}">
                            ${this.getStatusText(ticket.status)}
                        </span>
                    </div>
                    <div class="meta-item">
                        <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> 
                        <span class="priority-badge priority-${ticket.priority}">
                            ${this.getPriorityText(ticket.priority)}
                        </span>
                    </div>
                    <div class="meta-item">
                        <strong>–°–æ–∑–¥–∞–Ω:</strong> ${this.formatDate(ticket.timestamp)}
                    </div>
                </div>
                
                <div class="ticket-message">
                    <h3>–°–æ–æ–±—â–µ–Ω–∏–µ:</h3>
                    <p>${ticket.message}</p>
                </div>
                
                ${ticket.responses.length > 0 ? `
                    <div class="ticket-responses">
                        <h3>–û—Ç–≤–µ—Ç—ã:</h3>
                        ${ticket.responses.map(response => `
                            <div class="response-item">
                                <div class="response-header">
                                    <strong>${response.author}</strong>
                                    <span class="response-date">${this.formatDate(response.timestamp)}</span>
                                </div>
                                <div class="response-message">${response.message}</div>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `;

        modal.classList.add('active');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    createTicketModal() {
        const modal = document.createElement('div');
        modal.id = 'ticket-modal';
        modal.className = 'modal';
        modal.innerHTML = '<div class="modal-content"></div>';
        document.body.appendChild(modal);
        return modal;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–∏–∫–µ—Ç–∞
    closeTicketModal() {
        const modal = document.getElementById('ticket-modal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    getStatusText(status) {
        const statusMap = {
            'open': '–û—Ç–∫—Ä—ã—Ç',
            'submitted': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'waiting_response': '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
            'resolved': '–†–µ—à–µ–Ω',
            'closed': '–ó–∞–∫—Ä—ã—Ç',
            'failed': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'
        };
        return statusMap[status] || status;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    getPriorityText(priority) {
        const priorityMap = {
            'low': '–ù–∏–∑–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        };
        return priorityMap[priority] || priority;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(dateString) {
        if (window.telegramAPI && window.telegramAPI.formatDate) {
            return window.telegramAPI.formatDate(dateString);
        }
        
        return new Intl.DateTimeFormat('ru-RU', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(new Date(dateString));
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        if (window.app && window.app.showNotification) {
            window.app.showNotification(message, type);
        } else {
            // Fallback
            alert(message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
    getTicketStats() {
        const userTickets = this.getUserTickets();
        
        const stats = {
            total: userTickets.length,
            open: userTickets.filter(t => ['open', 'submitted', 'in_progress'].includes(t.status)).length,
            resolved: userTickets.filter(t => ['resolved', 'closed'].includes(t.status)).length,
            failed: userTickets.filter(t => t.status === 'failed').length
        };

        return stats;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    exportTickets() {
        return {
            tickets: this.tickets,
            userTickets: this.getUserTickets(),
            stats: this.getTicketStats()
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    cleanupOldTickets() {
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        const initialCount = this.tickets.length;
        this.tickets = this.tickets.filter(ticket => {
            const ticketDate = new Date(ticket.timestamp);
            return ticketDate > thirtyDaysAgo || ['open', 'submitted', 'in_progress'].includes(ticket.status);
        });

        if (this.tickets.length < initialCount) {
            this.saveTickets();
            console.log(`–û—á–∏—â–µ–Ω–æ ${initialCount - this.tickets.length} —Å—Ç–∞—Ä—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤`);
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    autoCleanup() {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∏–∫–µ—Ç—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å
        const lastCleanup = localStorage.getItem('ps_store_last_cleanup');
        const now = new Date().toDateString();
        
        if (lastCleanup !== now) {
            this.cleanupOldTickets();
            localStorage.setItem('ps_store_last_cleanup', now);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.SupportManager = SupportManager;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    if (!window.supportManager) {
        window.supportManager = new SupportManager();
        window.supportManager.autoCleanup();
    }
});